# Platform Engineering - CI/CD Pipeline
# 
# Ce workflow GitHub Actions automatise le processus de build et de d√©ploiement
# de l'application Platform Engineering. Il se d√©clenche lors des modifications
# dans le dossier src/ et construit une image Docker qui est pouss√©e vers Docker Hub.
#
# Auteur: Diags
# Version: 1.0.0

name: Platform Engineering CI/CD

# D√©clencheurs du workflow
on:
  push:
    # Se d√©clenche uniquement lors de modifications dans le dossier src/
    # pour √©viter des builds inutiles lors de changements de documentation
    paths:
      - 'src/**'
    # Se d√©clenche uniquement sur la branche main
    branches:
      - main
  # Permet de d√©clencher le workflow manuellement depuis l'interface GitHub
  workflow_dispatch:

# Configuration des jobs
jobs:
  # Job principal pour la construction et le push de l'image Docker
  docker:
    # Utilise un runner Ubuntu pour la compatibilit√©
    runs-on: ubuntu-latest
    
    # √âtapes du job
    steps:
      # √âtape 1: R√©cup√©ration du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # R√©cup√®re l'historique complet pour les tags
          fetch-depth: 0
      
      # √âtape 2: Debug - Affichage des fichiers pr√©sents
      - name: List files for debugging
        run: |
          echo "Files in repository:"
          ls -la
          echo "Dockerfile content:"
          cat Dockerfile
      
      # √âtape 3: Cr√©ation d'un SHA court pour le tag Docker
      - name: Set short SHA for Docker tag
        run: |
          # Extrait les 6 premiers caract√®res du SHA du commit
          echo "SHORT_SHA=${GITHUB_SHA:0:6}" >> $GITHUB_ENV
          echo "Full SHA: ${GITHUB_SHA}"
          echo "Short SHA: ${GITHUB_SHA:0:6}"
      
      # √âtape 4: Authentification aupr√®s de Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # Utilise les secrets configur√©s dans GitHub
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          # Logout automatique apr√®s le build pour la s√©curit√©
          logout: true
      
      # √âtape 5: Construction et push de l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          # Contexte de build (r√©pertoire racine)
          context: .
          # Fichier Dockerfile explicite
          file: ./Dockerfile
          # Active le push vers le registry
          push: true
          # Tags de l'image avec le SHA court
          tags: |
            diagsylla/platform-engineering:${{ env.SHORT_SHA }}
            diagsylla/platform-engineering:latest
          # Cache pour acc√©l√©rer les builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # M√©tadonn√©es pour l'image
          labels: |
            org.opencontainers.image.title=Platform Engineering
            org.opencontainers.image.description=Flask application for Platform Engineering
            org.opencontainers.image.version=${{ env.SHORT_SHA }}
            org.opencontainers.image.source=https://github.com/Diags/Platform-Engineering
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
      
      # √âtape 6: Notification de succ√®s (optionnel)
      - name: Build success notification
        if: success()
        run: |
          echo "‚úÖ Build successful!"
          echo "üê≥ Image pushed: diagsylla/platform-engineering:${{ env.SHORT_SHA }}"
          echo "üîó Docker Hub: https://hub.docker.com/r/diagsylla/platform-engineering"
      
      # √âtape 7: Notification d'√©chec (optionnel)
      - name: Build failure notification
        if: failure()
        run: |
          echo "‚ùå Build failed!"
          echo "üîç Check the logs above for details"

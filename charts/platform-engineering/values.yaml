# Platform Engineering Helm Chart - Configuration Values
# 
# Ce fichier contient les valeurs par défaut pour le déploiement de l'application
# Platform Engineering avec Helm. Toutes les valeurs peuvent être surchargées
# lors de l'installation ou de la mise à jour du chart.
#
# Auteur: Diags
# Version: 1.0.0
# Documentation: https://github.com/Diags/Platform-Engineering

# =============================================================================
# CONFIGURATION GÉNÉRALE
# =============================================================================

# Nombre de réplicas pour l'application
# Plus d'informations: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# Configuration de l'image Docker
# Plus d'informations: https://kubernetes.io/docs/concepts/containers/images/
image:
  # Repository Docker Hub contenant l'image
  repository: diagsylla/platform-engineering
  # Politique de pull des images (IfNotPresent, Always, Never)
  pullPolicy: IfNotPresent
  # Tag de l'image (par défaut: v2, peut être surchargé)
  tag: v2

# Secrets pour l'authentification auprès d'un registry privé
# Plus d'informations: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# Override du nom du chart
nameOverride: ""
fullnameOverride: ""

# =============================================================================
# SERVICE ACCOUNT
# =============================================================================

# Configuration du Service Account Kubernetes
# Plus d'informations: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Créer automatiquement un Service Account
  create: true
  # Monter automatiquement les credentials API du Service Account
  automount: true
  # Annotations à ajouter au Service Account
  annotations: {}
  # Nom du Service Account (généré automatiquement si vide)
  name: ""

# =============================================================================
# POD CONFIGURATION
# =============================================================================

# Annotations à ajouter aux pods
# Plus d'informations: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# Labels à ajouter aux pods
# Plus d'informations: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Contexte de sécurité au niveau du pod
podSecurityContext: {}
  # fsGroup: 2000  # Groupe propriétaire des volumes

# Contexte de sécurité au niveau du conteneur
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL  # Supprimer toutes les capabilities
  # readOnlyRootFilesystem: true  # Système de fichiers racine en lecture seule
  # runAsNonRoot: true  # Exécuter en tant qu'utilisateur non-root
  # runAsUser: 1000  # ID utilisateur spécifique

# =============================================================================
# SERVICE KUBERNETES
# =============================================================================

# Configuration du service Kubernetes
# Plus d'informations: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # Type de service (ClusterIP, NodePort, LoadBalancer)
  type: ClusterIP
  # Port d'exposition du service
  port: 5000

# =============================================================================
# INGRESS CONFIGURATION
# =============================================================================

# Configuration de l'Ingress pour l'exposition externe
# Plus d'informations: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # Activer l'Ingress
  enabled: true
  # Classe d'Ingress (nginx, traefik, etc.)
  className: nginx
  # Annotations pour l'Ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"  # Pour Let's Encrypt
  # Configuration des hôtes
  hosts:
    - host: platform-engineering.diagsylla.com
      paths:
        - path: /
          pathType: Prefix
  # Configuration TLS (HTTPS)
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /api/v1/health
    port: http
readinessProbe:
  httpGet:
    path: /api/v1/health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
